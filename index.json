[
{
	"uri": "//localhost:1313/",
	"title": "Restaurant Microservices Deployment Orchestration Workshop",
	"tags": [],
	"description": "",
	"content": "RESTAURANT MICROSERVICES DEPLOYMENT ORCHESTRATION WORKSHOP Overview Trong workshop này, bạn sẽ học cách orchestrate workflows deployment giữa các microservices sử dụng AWS Step Functions - một service mạnh mẽ, được quản lý đầy đủ cho serverless workflow orchestration. Chúng ta sẽ implement một hệ thống deployment automation hoàn chỉnh với parallel execution, error handling, rollback mechanisms, và monitoring.\nWorkshop Objectives Sau khi hoàn thành workshop này, bạn sẽ có thể:\nTechnical Skills • Master AWS Step Functions: Thiết kế và triển khai complex state machines cho microservices orchestration\n• Implement Advanced Orchestration: Parallel processing, dependency management, error handling, và rollback mechanisms\n• Deploy Production-Ready Systems: Monitoring, alerting, security, và operational procedures\n• Optimize Performance: Giảm deployment time từ 8 phút xuống 6 phút bằng parallel optimization\nBusiness Value • Reduce Manual Effort: Tự động hóa 100% deployment process\n• Improve Reliability: Zero-downtime deployments với rollback capability\n• Enhance Scalability: Support concurrent deployments và multi-environment\n• Increase Visibility: Real-time monitoring và comprehensive logging\nWorkshop Architecture Core Components 1. AWS Step Functions State Machine Purpose: Orchestrate deployment workflow Components: Initialize → Deploy → Validate → Notify Features: Error handling, retry policies, parallel execution 2. Lambda Functions deployment-initializer → Khởi tạo deployment process\rmicroservice-deployer → Deploy individual services health-checker → Validate service health\rdeployment-notifier → Send notifications 3. ECS Microservices auth-service → Authentication \u0026amp; authorization\rorder-service → Order processing \u0026amp; management\rpayment-service → Payment gateway integration notification-service → Email \u0026amp; SMS notifications Prerequisites AWS Account Requirements IAM Permissions: Administrator access hoặc custom policy với Step Functions, Lambda, ECS, CloudWatch, SNS permissions Technical Prerequisites AWS CLI: Version 2.x installed và configured Python: Version 3.8+ với pip Git: For cloning workshop repository Code Editor: VS Code recommended với AWS Toolkit extension Knowledge Prerequisites Basic AWS Services: Lambda, ECS, CloudWatch Python Programming: Functions, error handling, JSON processing Microservices Concepts: Service communication, dependencies, health checks DevOps Practices: CI/CD, deployment strategies, monitoring Workshop Success Criteria ✅ Technical Validation All 4 Lambda functions deployed successfully Step Functions state machine operational Error handling tested với rollback functionality Parallel processing achieving \u0026lt;6 minutes deployment Monitoring dashboard configured All AWS resources cleaned up ✅ Learning Objectives Met Can design complex Step Functions workflows Understands parallel processing optimization Can implement comprehensive error handling Knows operational best practices Can troubleshoot deployment issues Duration: 3.5 hours (215 phút)\nDifficulty: Intermediate to Advanced\nPrerequisites: AWS fundamentals, basic DevOps knowledge\n"
},
{
	"uri": "//localhost:1313/2-orchestration-theory/",
	"title": "Service Orchestration Theory",
	"tags": [],
	"description": "",
	"content": "2.1 Microservices Challenges Trong thế giới microservices hiện đại, chúng ta đối mặt với nhiều thách thức:\nDeployment Complexity: Traditional Monolith:\r[Deploy] → [Single Application] → [Success/Fail]\rMicroservices (5 services):\r[Deploy Service A] → [Deploy Service B] → [Deploy Service C]\r↓ ↓ ↓\r[Health Check] [Health Check] [Health Check]\r↓ ↓ ↓\r[Dependencies] [Dependencies] [Dependencies] Dependency Management: Trong hệ thống restaurant của chúng ta:\nAuth Service: Không depend on service nào (foundation) Menu Service: Depend on Auth (cần authentication) Restaurant Service: Depend on Auth (cần authorization) Order Service: Depend on Auth + Menu (cần menu data) Review Service: Depend on Auth + Order (cần order history) Cascade Failure Problems: Khi một service fail, nó có thể gây ra cascade failures:\nAuth Service fails → Menu Service can\u0026#39;t authenticate\r→ Restaurant Service can\u0026#39;t authorize\r→ Order Service can\u0026#39;t process\r→ Review Service can\u0026#39;t validate 2.2 Orchestration vs Choreography Choreography Pattern (Distributed): graph LR\rA[Service A] --\u0026gt;|Event| B[Service B]\rB --\u0026gt;|Event| C[Service C]\rC --\u0026gt;|Event| D[Service D] Pros: Loose coupling, high autonomy\nCons: Complex debugging, no central control\nOrchestration Pattern (Centralized): graph TD\rO[Orchestrator] --\u0026gt;|Deploy| A[Service A]\rO --\u0026gt;|Deploy| B[Service B] O --\u0026gt;|Deploy| C[Service C]\rO --\u0026gt;|Monitor| M[Monitoring] Pros: Central control, easy debugging, consistent error handling\nCons: Single point of failure (mitigated by managed services)\nChụp ảnh comparison table giữa 2 patterns\n2.3 AWS Step Functions Overview AWS Step Functions là managed service cho orchestration với:\nKey Features: Visual Workflow Designer: Drag-and-drop interface State Management: Automatic state persistence Error Handling: Built-in retry và catch mechanisms Parallel Execution: Concurrent task execution Integration: Native AWS service integration Monitoring: CloudWatch integration out-of-the-box Pricing Model: Standard Workflows: $0.025 per 1,000 state transitions Express Workflows: $1.00 per 1M requests + duration charges Free Tier: 4,000 state transitions per month Use Cases Perfect for Step Functions: Data processing workflows Microservices orchestration ETL pipelines Human approval workflows Batch job coordination AWS Step Functions là lựa chọn tối ưu cho orchestration vì tính reliability và scalability cao.\nHiểu rõ về orchestration rồi? Hãy tìm hiểu về business domain! 🏢\n"
},
{
	"uri": "//localhost:1313/3-business-domain/",
	"title": "Restaurant Business Domain",
	"tags": [],
	"description": "",
	"content": "3.1 Business Context Chúng ta đang xây dựng platform cho restaurant management system với các tính năng:\nCore Business Functions: 👥 User Management: Registration, authentication, profiles 🍽️ Menu Management: Dishes, categories, pricing, availability 🏢 Restaurant Management: Restaurant info, hours, locations 📦 Order Processing: Order creation, payment, tracking ⭐ Review System: Customer reviews, ratings, feedback Business Workflows: Customer Journey:\nRegister → Browse Restaurants → View Menu → Place Order → Leave Review Restaurant Journey:\nRegister → Setup Restaurant → Create Menu → Manage Orders → View Reviews 3.2 Microservices Breakdown Auth Service (Foundation Layer): Responsibilities:\nUser registration và authentication JWT token management Permission và role management Session handling API Endpoints:\nPOST /auth/register\rPOST /auth/login\rGET /auth/profile\rPOST /auth/logout Dependencies: None (foundation service)\nMenu Service (Business Layer): Responsibilities:\nDish management (CRUD operations) Category management Pricing và availability Menu search và filtering API Endpoints:\nGET /menu/restaurants/{id}/dishes\rPOST /menu/dishes\rPUT /menu/dishes/{id}\rDELETE /menu/dishes/{id} Dependencies: Auth Service (authentication required)\nRestaurant Service (Business Layer): Responsibilities:\nRestaurant profile management Location và hours management Table management Restaurant search API Endpoints:\nGET /restaurants\rPOST /restaurants\rPUT /restaurants/{id}\rGET /restaurants/{id}/tables Dependencies: Auth Service (authorization required)\nOrder Service (Business Layer): Responsibilities:\nOrder creation và management Payment processing integration Order status tracking Inventory management API Endpoints:\nPOST /orders\rGET /orders/{id}\rPUT /orders/{id}/status\rGET /users/{id}/orders Dependencies: Auth + Menu Services\nReview Service (Experience Layer): Responsibilities:\nReview và rating management Comment moderation Review analytics Recommendation engine data API Endpoints:\nPOST /reviews\rGET /restaurants/{id}/reviews\rPUT /reviews/{id}\rDELETE /reviews/{id} Dependencies: Auth + Order Services\nChụp ảnh architecture diagram với dependencies\n3.3 Deployment Dependencies Dependency Graph: Level 0: Auth Service (no dependencies)\r↓\rLevel 1: Menu Service, Restaurant Service (depend on Auth)\r↓\rLevel 2: Order Service (depends on Auth + Menu)\r↓\rLevel 3: Review Service (depends on Auth + Order) Deployment Strategy: Sequential Deployment: Deploy services level by level Parallel Within Level: Deploy Menu + Restaurant simultaneously Health Validation: Comprehensive checks at each level Rollback Capability: Automatic rollback on failure Dependency management là chìa khóa để đảm bảo deployment thành công trong microservices architecture.\nHiểu rõ business domain rồi? Hãy xem architecture overview! 🏗️\n"
},
{
	"uri": "//localhost:1313/4-architecture-overview/",
	"title": "Architecture Overview",
	"tags": [],
	"description": "",
	"content": "4.1 Overall System Architecture ┌─────────────────┐ ┌──────────────────┐ ┌─────────────────┐\r│ Frontend │ │ API Gateway │ │ Load Balancer │\r│ (React App) │◄──►│ (Optional) │◄──►│ (Optional) │\r└─────────────────┘ └──────────────────┘ └─────────────────┘\r│\r▼\r┌──────────────────────┐\r│ Step Functions │\r│ (Orchestrator) │\r└──────────────────────┘\r│\r┌───────────────┼───────────────┐\r▼ ▼ ▼\r┌──────────────┐ ┌──────────────┐ ┌──────────────┐\r│ Lambda │ │ Lambda │ │ Lambda │\r│ Health Check │ │ Notification │ │ Rollback │\r└──────────────┘ └──────────────┘ └──────────────┘\r│\r▼\r┌──────────────────────┐\r│ CloudWatch │\r│ (Monitoring) │\r└──────────────────────┘ 4.2 Step Functions Workflow Design High-Level Workflow: { \u0026#34;Comment\u0026#34;: \u0026#34;Restaurant Microservices Deployment Orchestration\u0026#34;, \u0026#34;StartAt\u0026#34;: \u0026#34;InitializeDeployment\u0026#34;, \u0026#34;States\u0026#34;: { \u0026#34;InitializeDeployment\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Pass\u0026#34;, \u0026#34;Next\u0026#34;: \u0026#34;Phase1_DeployFoundation\u0026#34; }, \u0026#34;Phase1_DeployFoundation\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;HealthCheckFunction\u0026#34;, \u0026#34;Next\u0026#34;: \u0026#34;Phase2_DeployBusinessServices\u0026#34; }, \u0026#34;Phase2_DeployBusinessServices\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Parallel\u0026#34;, \u0026#34;Branches\u0026#34;: [...], \u0026#34;Next\u0026#34;: \u0026#34;Phase3_DeployOrderService\u0026#34; }, \u0026#34;Phase3_DeployOrderService\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Next\u0026#34;: \u0026#34;Phase4_DeployReviewService\u0026#34; }, \u0026#34;Phase4_DeployReviewService\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Next\u0026#34;: \u0026#34;FinalValidation\u0026#34; }, \u0026#34;FinalValidation\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;End\u0026#34;: true } } } Error Handling Strategy: Retry Policies: Exponential backoff cho transient errors Catch Blocks: Specific error handling cho different failure types Rollback Workflow: Separate state machine cho rollback operations Circuit Breaker: Prevent cascading failures Chụp ảnh Step Functions visual workflow trong AWS Console\n4.3 Component Responsibilities AWS Step Functions (Orchestrator) Primary Role: Central coordination của deployment workflow Responsibilities: Sequence management Parallel execution coordination Error handling và retry logic State persistence Monitoring integration Lambda Functions (Workers) Health Check Function Validate service endpoints Check service dependencies Verify resource availability Report health status Notification Function Send deployment notifications Log deployment events Update monitoring systems Trigger downstream processes Rollback Coordinator Coordinate rollback across services Implement rollback strategies Ensure data consistency Validate rollback success CloudWatch (Monitoring) Execution metrics collection Error tracking và alerting Performance monitoring Custom business metrics 4.4 Data Flow Deployment Flow: graph TD\rA[Start Deployment] --\u0026gt; B[Initialize Context]\rB --\u0026gt; C[Deploy Auth Service]\rC --\u0026gt; D{Auth Healthy?}\rD --\u0026gt;|Yes| E[Deploy Menu \u0026amp; Restaurant]\rD --\u0026gt;|No| F[Rollback \u0026amp; Notify]\rE --\u0026gt; G{Business Services Healthy?}\rG --\u0026gt;|Yes| H[Deploy Order Service]\rG --\u0026gt;|No| I[Partial Rollback]\rH --\u0026gt; J[Deploy Review Service]\rJ --\u0026gt; K[Final Validation]\rK --\u0026gt; L[Success Notification] Error Flow: graph TD\rA[Service Failure] --\u0026gt; B[Retry Logic]\rB --\u0026gt; C{Retryable?}\rC --\u0026gt;|Yes| D[Exponential Backoff]\rC --\u0026gt;|No| E[Initiate Rollback]\rD --\u0026gt; F{Max Retries?}\rF --\u0026gt;|No| B\rF --\u0026gt;|Yes| E\rE --\u0026gt; G[Rollback Dependencies]\rG --\u0026gt; H[Validate Rollback]\rH --\u0026gt; I[Failure Notification] 4.5 Scalability Considerations Horizontal Scaling: Step Functions: 25,000 concurrent executions per region Lambda: 1,000 concurrent executions per region (default) CloudWatch: Unlimited metrics và logs Performance Optimization: Parallel Execution: Independent services deploy simultaneously Caching: Lambda function warm-up strategies Batching: Group related operations together Cost Optimization: Pay-per-execution: Only pay for actual usage Free Tier: 4,000 Step Functions transitions/month Resource Right-sizing: Optimize Lambda memory allocation Architecture này được thiết kế để scale từ development đến enterprise production workloads.\nHiểu rõ architecture rồi? Hãy bắt đầu setup AWS environment! ⚙️\n"
},
{
	"uri": "//localhost:1313/5-setup/",
	"title": "Setup và Chuẩn bị",
	"tags": [],
	"description": "",
	"content": "5.1 AWS Account Setup Bước 1: Verify AWS Account Access Đăng nhập vào AWS Console: https://aws.amazon.com/console/ Kiểm tra region: Đảm bảo đang ở US East (N. Virginia) Verify permissions: Có thể tạo IAM roles, Lambda functions, Step Functions Chụp ảnh AWS Console homepage với region selector\nBước 2: Enable Required Services Đảm bảo các services sau đã được enable:\n✅ AWS Step Functions ✅ AWS Lambda ✅ AWS IAM ✅ Amazon CloudWatch ✅ AWS CloudFormation (optional) 5.2 IAM Roles và Permissions Setup Step Functions Execution Role Bước 1: Tạo Trust Policy { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: \u0026#34;states.amazonaws.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34; } ] } Bước 2: Tạo IAM Role Navigate: IAM Console → Roles → Create role Trusted entity type: AWS service Service: Step Functions Use case: Step Functions Role name: StepFunctions-RestaurantOrchestrator-Role Chụp ảnh IAM role creation flow\nBước 3: Attach Policies Required policies cho Step Functions role:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;lambda:InvokeFunction\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:*:*:function:restaurant-*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;logs:CreateLogStream\u0026#34;, \u0026#34;logs:PutLogEvents\u0026#34;, \u0026#34;logs:CreateLogDelivery\u0026#34;, \u0026#34;logs:GetLogDelivery\u0026#34;, \u0026#34;logs:UpdateLogDelivery\u0026#34;, \u0026#34;logs:DeleteLogDelivery\u0026#34;, \u0026#34;logs:ListLogDeliveries\u0026#34;, \u0026#34;logs:PutResourcePolicy\u0026#34;, \u0026#34;logs:DescribeResourcePolicies\u0026#34;, \u0026#34;logs:DescribeLogGroups\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Lambda Execution Role Bước 1: Tạo Lambda Role IAM Console → Roles → Create role Service: Lambda Role name: Lambda-RestaurantServices-Role Bước 2: Attach Policies AWSLambdaBasicExecutionRole (AWS managed) CloudWatchLogsFullAccess (AWS managed) Trong production, hãy sử dụng least privilege principle với custom policies thay vì FullAccess.\n5.3 Development Environment Browser-Based Development Sử dụng AWS Console hoàn toàn qua browser:\n✅ Step Functions Console cho workflow design ✅ Lambda Console cho function development ✅ CloudWatch Console cho monitoring ✅ IAM Console cho permission management Local Development Setup (Optional) # Install AWS CLI curl \u0026#34;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\u0026#34; -o \u0026#34;awscliv2.zip\u0026#34; unzip awscliv2.zip sudo ./aws/install # Configure AWS CLI aws configure # AWS Access Key ID: [Your Access Key] # AWS Secret Access Key: [Your Secret Key] # Default region name: us-east-1 # Default output format: json # Verify setup aws sts get-caller-identity 5.4 Workshop Environment Checklist Trước khi bắt đầu hands-on, hãy đảm bảo:\nAWS Console Access Đăng nhập thành công vào AWS Console Region được set to us-east-1 Có permissions để tạo IAM roles Có permissions để tạo Lambda functions Có permissions để tạo Step Functions IAM Roles Created StepFunctions-RestaurantOrchestrator-Role đã tạo Lambda-RestaurantServices-Role đã tạo Trust policies đã configure đúng Required permissions đã attach Development Tools Browser mở sẵn AWS Console Text editor cho JSON editing Notepad để ghi chú (optional) Tất cả các resources chúng ta tạo trong workshop đều eligible cho AWS Free Tier.\n5.5 Cost Estimation Expected Costs (Free Tier) Step Functions: 4,000 transitions/month free Lambda: 1M requests/month free + 400,000 GB-seconds compute CloudWatch: 10 custom metrics + 5GB logs free IAM: Không tính phí Workshop Usage Step Functions: ~50 transitions trong workshop Lambda: ~100 invocations trong workshop CloudWatch: ~20 log entries Total Cost: $0.00 (trong Free Tier limits)\nSetup hoàn tất! Sẵn sàng develop Lambda functions? 🚀\nNext Steps Lambda Functions Development Step Functions Workflow Error Handling Bạn đã hoàn thành setup cơ bản! Hãy chuyển sang phần tiếp theo để bắt đầu coding.\n"
},
{
	"uri": "//localhost:1313/1-introduction/",
	"title": "1. Introduction to the Workshop",
	"tags": [],
	"description": "",
	"content": "Current State Analysis Manual deployment processes → 2-3 hours per release\nService dependency management → Error-prone manual coordination\nRollback complexity → 30+ minutes recovery time\nLimited monitoring → Poor visibility into deployment status\nTarget State with Workshop Solution Automated orchestration → 6 minutes end-to-end\nDynamic dependency resolution → Automatic parallelization\nOne-click rollback → 2 minutes recovery time\nComprehensive monitoring → Real-time dashboards\nWorkshop Problem Statement Trong môi trường enterprise hiện tại, việc deploy microservices thường gặp phải các thách thức:\n🔴 Current Challenges Manual Coordination: Teams phải manually coordinate deployment order Dependency Hell: Complex service dependencies dẫn đến deployment failures No Rollback Strategy: Khi có lỗi, phải manually revert từng service Limited Visibility: Không có central view về deployment status Time Consuming: Average 2-3 hours cho một complete deployment cycle 🟢 Workshop Solution Automated Orchestration: AWS Step Functions điều phối toàn bộ process Smart Dependency Management: Automatic detection và parallel execution Built-in Rollback: One-click rollback với comprehensive error handling Real-time Monitoring: CloudWatch dashboards với detailed metrics Performance Optimized: Sub-6-minute deployment cycles What You\u0026rsquo;ll Build Một production-ready deployment orchestration system bao gồm:\n🏗️ Core Infrastructure Step Functions State Machine: Complex workflow orchestration Lambda Functions: Deployment automation (4 specialized functions) ECS Services: Restaurant microservices (auth, order, payment, notification) CloudWatch Integration: Comprehensive monitoring và alerting 🚀 Key Features Parallel Processing: Deploy independent services simultaneously Error Handling: Comprehensive retry policies và rollback mechanisms Health Monitoring: Automated health checks với dependency validation Notification System: Real-time status updates và alerts Success Metrics Sau workshop, hệ thống của bạn sẽ đạt:\n✅ \u0026lt;6 minutes total deployment time (down from 120+ minutes) ✅ 99.9% deployment success rate với automated rollback ✅ Zero manual intervention required cho standard deployments ✅ Real-time visibility into all deployment stages ✅ Production-ready error handling và monitoring Ready to transform your deployment process? Let\u0026rsquo;s dive into environment preparation! 🚀\n"
},
{
	"uri": "//localhost:1313/2-environment-prep/",
	"title": "2. Environment Preparation",
	"tags": [],
	"description": "",
	"content": "AWS Account Setup (5 phút) Verify AWS CLI Installation # Verify AWS CLI installation aws --version # Expected output: aws-cli/2.x.x # Check current identity aws sts get-caller-identity # Verify you have appropriate permissions # Test Step Functions access aws stepfunctions list-state-machines --region us-east-1 Nếu chưa có AWS CLI, bạn có thể sử dụng AWS Console cho toàn bộ workshop.\nIAM Permissions Required Ensure your AWS account has the following permissions:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;states:*\u0026#34;, \u0026#34;lambda:*\u0026#34;, \u0026#34;ecs:*\u0026#34;, \u0026#34;iam:PassRole\u0026#34;, \u0026#34;logs:*\u0026#34;, \u0026#34;sns:*\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Environment Configuration (10 phút) Clone Workshop Repository # Clone workshop repository git clone https://github.com/your-org/restaurant-deployment-workshop.git cd restaurant-deployment-workshop # Create Python virtual environment python -m venv workshop-env source workshop-env/bin/activate # Linux/Mac # workshop-env\\Scripts\\activate # Windows # Install required dependencies pip install -r requirements.txt Configuration Files Expected Repository Structure:\nrestaurant-deployment-workshop/\r├── src/\r│ ├── deployment_orchestrator.py\r│ ├── lambda_functions/\r│ └── utils/\r├── config/\r│ ├── aws_config.yaml\r│ └── service_dependencies.yaml\r├── scripts/\r│ ├── deploy_lambda_functions.py\r│ └── validate_permissions.py\r├── step_functions/\r│ └── deployment_state_machine.json\r└── requirements.txt AWS Configuration Setup File: config/aws_config.yaml\naws: region: \u0026#34;us-east-1\u0026#34; account_id: \u0026#34;YOUR_ACCOUNT_ID\u0026#34; step_functions: state_machine_name: \u0026#34;restaurant-deployment-orchestrator\u0026#34; execution_role_arn: \u0026#34;arn:aws:iam::ACCOUNT:role/step-functions-execution-role\u0026#34; lambda: runtime: \u0026#34;python3.9\u0026#34; timeout: 300 memory_size: 512 ecs: cluster_name: \u0026#34;restaurant-cluster\u0026#34; cloudwatch: log_group_prefix: \u0026#34;/aws/workshop/restaurant-deployment\u0026#34; Validation \u0026amp; Testing (5 phút) Test Deployment Orchestrator # Validate deployment orchestrator python src/deployment_orchestrator.py --help # Test AWS connectivity python scripts/validate_permissions.py # Check configuration files python -c \u0026#34;import yaml; print(yaml.safe_load(open(\u0026#39;config/aws_config.yaml\u0026#39;)))\u0026#34; Expected Output AWS Connection: ✅ SUCCESS IAM Permissions: ✅ VERIFIED Step Functions Access: ✅ AVAILABLE Lambda Access: ✅ AVAILABLE ECS Access: ✅ AVAILABLE Configuration: ✅ VALID Nếu bất kỳ validation nào failed, hãy check lại IAM permissions hoặc AWS CLI configuration.\nPre-Workshop Health Check AWS Console Access Step Functions Console: https://console.aws.amazon.com/states/ Lambda Console: https://console.aws.amazon.com/lambda/ ECS Console: https://console.aws.amazon.com/ecs/ CloudWatch Console: https://console.aws.amazon.com/cloudwatch/ Verify Empty State # Should return empty lists (initial state) aws stepfunctions list-state-machines --region us-east-1 aws lambda list-functions --region us-east-1 aws ecs list-clusters --region us-east-1 Cost Estimation Workshop Cost: Estimated $0.50 - $2.00 total cost\nStep Functions: ~$0.20 Lambda: ~$0.10 ECS (minimal): ~$1.00 CloudWatch: ~$0.20 All resources will be deleted at the end of the workshop.\nEnvironment ready? Let\u0026rsquo;s start deploying services! 🚀\n"
},
{
	"uri": "//localhost:1313/3-service-dispatch/",
	"title": "3. Service Dispatch",
	"tags": [],
	"description": "",
	"content": "Deploy Lambda Functions (15 phút) Core Deployment Script Deploy all Lambda functions for the orchestration system:\n# Deploy all Lambda functions python scripts/deploy_lambda_functions.py --environment workshop # Verify deployment success aws lambda list-functions \\ --query \u0026#34;Functions[?contains(FunctionName, \u0026#39;deployment\u0026#39;)].[FunctionName,Runtime,LastModified]\u0026#34; \\ --output table Expected Functions Created deployment-initializer-workshop\nRuntime: python3.9 Memory: 512MB Timeout: 5 minutes Role: workshop-lambda-execution-role microservice-deployer-workshop\nRuntime: python3.9 Memory: 1024MB Timeout: 15 minutes Environment Variables: ECS_CLUSTER_NAME health-checker-workshop\nRuntime: python3.9 Memory: 256MB Timeout: 2 minutes VPC Configuration: Private subnets deployment-notifier-workshop\nRuntime: python3.9 Memory: 256MB Timeout: 1 minute Environment Variables: SNS_TOPIC_ARN ECS Services Configuration (10 phút) Update Service Configuration File: config/aws_config.yaml - Microservices section:\nmicroservices: auth_service: name: \u0026#34;restaurant-auth-service\u0026#34; cluster: \u0026#34;restaurant-cluster\u0026#34; repository: \u0026#34;123456789012.dkr.ecr.us-east-1.amazonaws.com/auth-service\u0026#34; tag: \u0026#34;latest\u0026#34; desired_count: 2 health_check_endpoint: \u0026#34;/health\u0026#34; health_check_grace_period: 60 port: 8080 cpu: 256 memory: 512 order_service: name: \u0026#34;restaurant-order-service\u0026#34; cluster: \u0026#34;restaurant-cluster\u0026#34; repository: \u0026#34;123456789012.dkr.ecr.us-east-1.amazonaws.com/order-service\u0026#34; tag: \u0026#34;latest\u0026#34; desired_count: 3 health_check_endpoint: \u0026#34;/api/health\u0026#34; health_check_grace_period: 90 port: 8081 cpu: 512 memory: 1024 payment_service: name: \u0026#34;restaurant-payment-service\u0026#34; cluster: \u0026#34;restaurant-cluster\u0026#34; repository: \u0026#34;123456789012.dkr.ecr.us-east-1.amazonaws.com/payment-service\u0026#34; tag: \u0026#34;latest\u0026#34; desired_count: 2 health_check_endpoint: \u0026#34;/api/v1/health\u0026#34; health_check_grace_period: 75 port: 8082 cpu: 512 memory: 1024 notification_service: name: \u0026#34;restaurant-notification-service\u0026#34; cluster: \u0026#34;restaurant-cluster\u0026#34; repository: \u0026#34;123456789012.dkr.ecr.us-east-1.amazonaws.com/notification-service\u0026#34; tag: \u0026#34;latest\u0026#34; desired_count: 1 health_check_endpoint: \u0026#34;/status\u0026#34; health_check_grace_period: 45 port: 8083 cpu: 256 memory: 512 ECS Cluster Setup # Create ECS cluster for workshop aws ecs create-cluster \\ --cluster-name restaurant-cluster \\ --capacity-providers FARGATE \\ --default-capacity-provider-strategy capacityProvider=FARGATE,weight=1 # Verify cluster creation aws ecs describe-clusters \\ --clusters restaurant-cluster \\ --query \u0026#34;clusters[0].status\u0026#34; Manual Deployment Test (5 phút) Test Single Service Deployment # Test single service deployment python src/deployment_orchestrator.py deploy \\ --services auth-service \\ --environment workshop \\ --wait # Verify deployment status python src/deployment_orchestrator.py status \\ --service auth-service Expected Output 🚀 Starting deployment for: auth-service 📋 Deployment ID: dep-auth-20241201-143022 ⏱️ Estimated time: 90 seconds ✅ Service deployment initiated ✅ Health check passed (3/3) ✅ Load balancer updated ✅ Deployment completed successfully 📊 Deployment Summary: - Duration: 1m 23s - Status: SUCCESS - Health: HEALTHY - Task Count: 2/2 running Validation Commands # Check service health curl -s http://auth-service.workshop.local/health | jq # Verify ECS service status aws ecs describe-services \\ --cluster restaurant-cluster \\ --services restaurant-auth-service \\ --query \u0026#34;services[0].deployments[0].status\u0026#34; # Check logs aws logs tail /aws/ecs/restaurant-auth-service --follow Success Criteria: Service shows RUNNING status với healthy task count matching desired count.\nLambda Function Details 1. Deployment Initializer Purpose: Khởi tạo deployment process và validate dependencies\n# Key functionality def lambda_handler(event, context): deployment_id = generate_deployment_id() services = event[\u0026#39;services\u0026#39;] # Validate service configurations for service in services: validate_service_config(service) # Create deployment plan plan = create_deployment_plan(services) return { \u0026#39;deployment_id\u0026#39;: deployment_id, \u0026#39;plan\u0026#39;: plan, \u0026#39;status\u0026#39;: \u0026#39;INITIALIZED\u0026#39; } 2. Microservice Deployer Purpose: Deploy individual ECS services với health monitoring\ndef lambda_handler(event, context): service_name = event[\u0026#39;service_name\u0026#39;] # Deploy ECS service deployment = deploy_ecs_service(service_name) # Wait for stable state wait_for_stable_deployment(deployment) # Perform health check health_status = check_service_health(service_name) return { \u0026#39;service\u0026#39;: service_name, \u0026#39;deployment_arn\u0026#39;: deployment[\u0026#39;deploymentArn\u0026#39;], \u0026#39;status\u0026#39;: \u0026#39;DEPLOYED\u0026#39;, \u0026#39;health\u0026#39;: health_status } 3. Health Checker Purpose: Comprehensive health validation cho deployed services\ndef lambda_handler(event, context): service_name = event[\u0026#39;service_name\u0026#39;] # Check ECS task health ecs_health = check_ecs_health(service_name) # Check application endpoint app_health = check_endpoint_health(service_name) # Check dependencies deps_health = check_dependencies(service_name) overall_status = aggregate_health_status([ ecs_health, app_health, deps_health ]) return { \u0026#39;service\u0026#39;: service_name, \u0026#39;health_status\u0026#39;: overall_status, \u0026#39;details\u0026#39;: { \u0026#39;ecs\u0026#39;: ecs_health, \u0026#39;application\u0026#39;: app_health, \u0026#39;dependencies\u0026#39;: deps_health } } 4. Deployment Notifier Purpose: Send notifications về deployment status\ndef lambda_handler(event, context): deployment_id = event[\u0026#39;deployment_id\u0026#39;] status = event[\u0026#39;status\u0026#39;] # Prepare notification message message = prepare_notification(deployment_id, status) # Send to SNS topic send_notification(message) # Log to CloudWatch log_deployment_event(deployment_id, status) return { \u0026#39;notification_sent\u0026#39;: True, \u0026#39;timestamp\u0026#39;: datetime.utcnow().isoformat() } Lambda functions deployed successfully? Time for workflow orchestration! 🎯\n"
},
{
	"uri": "//localhost:1313/4-workflow-orchestration/",
	"title": "4. Workflow Orchestration",
	"tags": [],
	"description": "",
	"content": "Design State Machine (15 phút) State Machine Components Chúng ta sẽ tạo một AWS Step Functions state machine để orchestrate deployment workflow:\n{ \u0026#34;Comment\u0026#34;: \u0026#34;Restaurant Microservices Deployment Orchestrator\u0026#34;, \u0026#34;StartAt\u0026#34;: \u0026#34;InitializeDeployment\u0026#34;, \u0026#34;States\u0026#34;: { \u0026#34;InitializeDeployment\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:ACCOUNT:function:deployment-initializer\u0026#34;, \u0026#34;Next\u0026#34;: \u0026#34;ValidateServices\u0026#34;, \u0026#34;Retry\u0026#34;: [ { \u0026#34;ErrorEquals\u0026#34;: [\u0026#34;States.TaskFailed\u0026#34;], \u0026#34;IntervalSeconds\u0026#34;: 5, \u0026#34;MaxAttempts\u0026#34;: 3, \u0026#34;BackoffRate\u0026#34;: 2.0 } ], \u0026#34;Catch\u0026#34;: [ { \u0026#34;ErrorEquals\u0026#34;: [\u0026#34;States.ALL\u0026#34;], \u0026#34;Next\u0026#34;: \u0026#34;HandleFailure\u0026#34;, \u0026#34;ResultPath\u0026#34;: \u0026#34;$.error\u0026#34; } ] }, \u0026#34;ValidateServices\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:ACCOUNT:function:health-checker\u0026#34;, \u0026#34;Next\u0026#34;: \u0026#34;DeployServices\u0026#34;, \u0026#34;Retry\u0026#34;: [ { \u0026#34;ErrorEquals\u0026#34;: [\u0026#34;States.TaskFailed\u0026#34;], \u0026#34;IntervalSeconds\u0026#34;: 10, \u0026#34;MaxAttempts\u0026#34;: 2, \u0026#34;BackoffRate\u0026#34;: 1.5 } ] }, \u0026#34;DeployServices\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Parallel\u0026#34;, \u0026#34;Branches\u0026#34;: [ { \u0026#34;StartAt\u0026#34;: \u0026#34;DeployAuthService\u0026#34;, \u0026#34;States\u0026#34;: { \u0026#34;DeployAuthService\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:ACCOUNT:function:microservice-deployer\u0026#34;, \u0026#34;Parameters\u0026#34;: { \u0026#34;service_name\u0026#34;: \u0026#34;auth-service\u0026#34; }, \u0026#34;End\u0026#34;: true } } }, { \u0026#34;StartAt\u0026#34;: \u0026#34;DeployNotificationService\u0026#34;, \u0026#34;States\u0026#34;: { \u0026#34;DeployNotificationService\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:ACCOUNT:function:microservice-deployer\u0026#34;, \u0026#34;Parameters\u0026#34;: { \u0026#34;service_name\u0026#34;: \u0026#34;notification-service\u0026#34; }, \u0026#34;End\u0026#34;: true } } } ], \u0026#34;Next\u0026#34;: \u0026#34;DeployBusinessServices\u0026#34; }, \u0026#34;DeployBusinessServices\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Parallel\u0026#34;, \u0026#34;Branches\u0026#34;: [ { \u0026#34;StartAt\u0026#34;: \u0026#34;DeployOrderService\u0026#34;, \u0026#34;States\u0026#34;: { \u0026#34;DeployOrderService\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:ACCOUNT:function:microservice-deployer\u0026#34;, \u0026#34;Parameters\u0026#34;: { \u0026#34;service_name\u0026#34;: \u0026#34;order-service\u0026#34; }, \u0026#34;End\u0026#34;: true } } }, { \u0026#34;StartAt\u0026#34;: \u0026#34;DeployPaymentService\u0026#34;, \u0026#34;States\u0026#34;: { \u0026#34;DeployPaymentService\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:ACCOUNT:function:microservice-deployer\u0026#34;, \u0026#34;Parameters\u0026#34;: { \u0026#34;service_name\u0026#34;: \u0026#34;payment-service\u0026#34; }, \u0026#34;End\u0026#34;: true } } } ], \u0026#34;Next\u0026#34;: \u0026#34;FinalHealthCheck\u0026#34; }, \u0026#34;FinalHealthCheck\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:ACCOUNT:function:health-checker\u0026#34;, \u0026#34;Parameters\u0026#34;: { \u0026#34;validate_all\u0026#34;: true }, \u0026#34;Next\u0026#34;: \u0026#34;SendSuccessNotification\u0026#34; }, \u0026#34;SendSuccessNotification\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:ACCOUNT:function:deployment-notifier\u0026#34;, \u0026#34;Parameters\u0026#34;: { \u0026#34;status\u0026#34;: \u0026#34;SUCCESS\u0026#34; }, \u0026#34;End\u0026#34;: true }, \u0026#34;HandleFailure\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:ACCOUNT:function:deployment-notifier\u0026#34;, \u0026#34;Parameters\u0026#34;: { \u0026#34;status\u0026#34;: \u0026#34;FAILED\u0026#34; }, \u0026#34;End\u0026#34;: true } } } Workflow Logic Explanation Phase 1: Initialization\nValidate deployment request Create deployment plan Check prerequisites Phase 2: Foundation Services (Parallel)\nAuth Service (required by all others) Notification Service (independent) Phase 3: Business Services (Parallel)\nOrder Service (depends on Auth) Payment Service (depends on Auth) Phase 4: Validation \u0026amp; Notification\nFinal health check Success/failure notification Deploy Step Functions Workflow (20 phút) Create State Machine # Create Step Functions state machine python src/deployment_orchestrator.py setup \\ --state-machine-name restaurant-deployment-orchestrator \\ --region us-east-1 # Verify state machine creation aws stepfunctions describe-state-machine \\ --state-machine-arn arn:aws:states:us-east-1:ACCOUNT:stateMachine:restaurant-deployment-orchestrator IAM Role Configuration Create execution role với required permissions:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;lambda:InvokeFunction\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:lambda:us-east-1:ACCOUNT:function:deployment-*\u0026#34; ] }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;logs:CreateLogStream\u0026#34;, \u0026#34;logs:PutLogEvents\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:logs:us-east-1:ACCOUNT:*\u0026#34; } ] } Alternative: Manual Creation via Console Open Step Functions Console: https://console.aws.amazon.com/states/ Create State Machine → \u0026ldquo;Write your workflow in code\u0026rdquo; Paste the JSON definition above Configure IAM role với Lambda invoke permissions Name: restaurant-deployment-orchestrator Execute Complete Workflow (10 phút) Start Deployment Execution # Start complete deployment workflow python src/deployment_orchestrator.py deploy \\ --environment workshop \\ --strategy sequential \\ --wait # Monitor execution progress python src/deployment_orchestrator.py status \\ --follow Input Parameters { \u0026#34;deployment_id\u0026#34;: \u0026#34;dep-restaurant-20241201-150000\u0026#34;, \u0026#34;environment\u0026#34;: \u0026#34;workshop\u0026#34;, \u0026#34;services\u0026#34;: [ \u0026#34;auth-service\u0026#34;, \u0026#34;notification-service\u0026#34;, \u0026#34;order-service\u0026#34;, \u0026#34;payment-service\u0026#34; ], \u0026#34;strategy\u0026#34;: \u0026#34;parallel_optimized\u0026#34;, \u0026#34;timeout\u0026#34;: 600 } Expected Execution Flow ⏱️ 00:00 - Execution Started ✅ 00:15 - InitializeDeployment: SUCCESS ✅ 00:30 - ValidateServices: SUCCESS 🔄 00:45 - DeployServices (Parallel): IN_PROGRESS ├── ✅ 01:30 - Auth Service: DEPLOYED └── ✅ 01:20 - Notification Service: DEPLOYED 🔄 01:45 - DeployBusinessServices (Parallel): IN_PROGRESS ├── ✅ 03:15 - Order Service: DEPLOYED └── ✅ 03:00 - Payment Service: DEPLOYED ✅ 03:30 - FinalHealthCheck: SUCCESS ✅ 03:45 - SendSuccessNotification: SUCCESS 🎉 Total Duration: 3m 45s Monitor via AWS Console Step Functions Execution View:\nOpen execution trong Step Functions console Click vào individual states để xem details Check CloudWatch logs cho each Lambda function Monitor real-time progress Performance Optimization: Parallel execution giảm deployment time từ ~8 phút (sequential) xuống ~4 phút (parallel).\nWorkflow Visualization graph TD\rA[Initialize Deployment] --\u0026gt; B[Validate Services]\rB --\u0026gt; C{Parallel: Foundation}\rC --\u0026gt; D[Deploy Auth Service]\rC --\u0026gt; E[Deploy Notification Service]\rD --\u0026gt; F{Parallel: Business}\rE --\u0026gt; F\rF --\u0026gt; G[Deploy Order Service]\rF --\u0026gt; H[Deploy Payment Service]\rG --\u0026gt; I[Final Health Check]\rH --\u0026gt; I\rI --\u0026gt; J[Send Success Notification]\rB --\u0026gt; K[Handle Failure]\rC --\u0026gt; K\rF --\u0026gt; K\rI --\u0026gt; K\rK --\u0026gt; L[Send Failure Notification]\rstyle A fill:#e1f5fe\rstyle J fill:#c8e6c9\rstyle L fill:#ffcdd2 Testing Different Execution Strategies Sequential Strategy # Deploy services one by one python src/deployment_orchestrator.py deploy \\ --strategy sequential \\ --services auth-service,order-service,payment-service,notification-service Parallel Optimized Strategy # Deploy with dependency-aware parallelization python src/deployment_orchestrator.py deploy \\ --strategy parallel_optimized \\ --services auth-service,order-service,payment-service,notification-service Comparison Results Sequential: ~8 minutes total Parallel Optimized: ~4 minutes total Time Saved: 50% improvement State machine orchestrating successfully? Let\u0026rsquo;s add robust error handling! 🛡️\n"
},
{
	"uri": "//localhost:1313/5-error-handling/",
	"title": "5. Error Handling &amp; Resilience",
	"tags": [],
	"description": "",
	"content": "Implement Retry Policies (10 phút) Enhanced Retry Configuration Chúng ta sẽ cải thiện retry policies để handle different types of errors:\n{ \u0026#34;Retry\u0026#34;: [ { \u0026#34;ErrorEquals\u0026#34;: [\u0026#34;States.TaskFailed\u0026#34;, \u0026#34;Lambda.ServiceException\u0026#34;], \u0026#34;IntervalSeconds\u0026#34;: 5, \u0026#34;MaxAttempts\u0026#34;: 3, \u0026#34;BackoffRate\u0026#34;: 2.0, \u0026#34;Comment\u0026#34;: \u0026#34;Retry for service exceptions with exponential backoff\u0026#34; }, { \u0026#34;ErrorEquals\u0026#34;: [\u0026#34;States.Timeout\u0026#34;], \u0026#34;IntervalSeconds\u0026#34;: 10, \u0026#34;MaxAttempts\u0026#34;: 2, \u0026#34;BackoffRate\u0026#34;: 1.5, \u0026#34;Comment\u0026#34;: \u0026#34;Retry for timeout errors with longer intervals\u0026#34; }, { \u0026#34;ErrorEquals\u0026#34;: [\u0026#34;Lambda.Unknown\u0026#34;], \u0026#34;IntervalSeconds\u0026#34;: 2, \u0026#34;MaxAttempts\u0026#34;: 5, \u0026#34;BackoffRate\u0026#34;: 1.2, \u0026#34;Comment\u0026#34;: \u0026#34;Retry for unknown Lambda errors\u0026#34; } ], \u0026#34;Catch\u0026#34;: [ { \u0026#34;ErrorEquals\u0026#34;: [\u0026#34;States.ALL\u0026#34;], \u0026#34;Next\u0026#34;: \u0026#34;HandleFailure\u0026#34;, \u0026#34;ResultPath\u0026#34;: \u0026#34;$.error\u0026#34;, \u0026#34;Comment\u0026#34;: \u0026#34;Catch all unhandled errors\u0026#34; } ] } Error Classification Retryable Errors:\nNetwork timeouts Service temporarily unavailable Rate limiting Transient AWS service issues Non-Retryable Errors:\nInvalid configuration Permission denied Resource not found Invalid input parameters Custom Error Handler Implementation # Lambda function: error-handler def lambda_handler(event, context): error_info = event.get(\u0026#39;error\u0026#39;, {}) deployment_id = event.get(\u0026#39;deployment_id\u0026#39;) # Classify error type error_type = classify_error(error_info) if error_type == \u0026#39;RETRYABLE\u0026#39;: return { \u0026#39;action\u0026#39;: \u0026#39;RETRY\u0026#39;, \u0026#39;delay_seconds\u0026#39;: calculate_backoff(event), \u0026#39;max_attempts\u0026#39;: get_max_attempts(error_info) } elif error_type == \u0026#39;ROLLBACK_REQUIRED\u0026#39;: return { \u0026#39;action\u0026#39;: \u0026#39;ROLLBACK\u0026#39;, \u0026#39;deployment_id\u0026#39;: deployment_id, \u0026#39;rollback_strategy\u0026#39;: \u0026#39;IMMEDIATE\u0026#39; } else: return { \u0026#39;action\u0026#39;: \u0026#39;FAIL\u0026#39;, \u0026#39;error_details\u0026#39;: error_info, \u0026#39;notification_required\u0026#39;: True } Rollback Mechanisms (15 phút) Rollback State Machine Enhanced state machine với rollback capability:\n{ \u0026#34;HandleFailure\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:ACCOUNT:function:error-handler\u0026#34;, \u0026#34;Next\u0026#34;: \u0026#34;DecideAction\u0026#34; }, \u0026#34;DecideAction\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Choice\u0026#34;, \u0026#34;Choices\u0026#34;: [ { \u0026#34;Variable\u0026#34;: \u0026#34;$.action\u0026#34;, \u0026#34;StringEquals\u0026#34;: \u0026#34;ROLLBACK\u0026#34;, \u0026#34;Next\u0026#34;: \u0026#34;InitiateRollback\u0026#34; }, { \u0026#34;Variable\u0026#34;: \u0026#34;$.action\u0026#34;, \u0026#34;StringEquals\u0026#34;: \u0026#34;RETRY\u0026#34;, \u0026#34;Next\u0026#34;: \u0026#34;WaitBeforeRetry\u0026#34; } ], \u0026#34;Default\u0026#34;: \u0026#34;SendFailureNotification\u0026#34; }, \u0026#34;InitiateRollback\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Parallel\u0026#34;, \u0026#34;Branches\u0026#34;: [ { \u0026#34;StartAt\u0026#34;: \u0026#34;RollbackOrderService\u0026#34;, \u0026#34;States\u0026#34;: { \u0026#34;RollbackOrderService\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:ACCOUNT:function:rollback-service\u0026#34;, \u0026#34;Parameters\u0026#34;: { \u0026#34;service_name\u0026#34;: \u0026#34;order-service\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;ROLLBACK_TO_PREVIOUS\u0026#34; }, \u0026#34;End\u0026#34;: true } } }, { \u0026#34;StartAt\u0026#34;: \u0026#34;RollbackPaymentService\u0026#34;, \u0026#34;States\u0026#34;: { \u0026#34;RollbackPaymentService\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:ACCOUNT:function:rollback-service\u0026#34;, \u0026#34;Parameters\u0026#34;: { \u0026#34;service_name\u0026#34;: \u0026#34;payment-service\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;ROLLBACK_TO_PREVIOUS\u0026#34; }, \u0026#34;End\u0026#34;: true } } } ], \u0026#34;Next\u0026#34;: \u0026#34;ValidateRollback\u0026#34; }, \u0026#34;ValidateRollback\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:us-east-1:ACCOUNT:function:health-checker\u0026#34;, \u0026#34;Parameters\u0026#34;: { \u0026#34;validate_rollback\u0026#34;: true }, \u0026#34;Next\u0026#34;: \u0026#34;SendRollbackNotification\u0026#34; } } Rollback Lambda Function # Lambda function: rollback-service def lambda_handler(event, context): service_name = event[\u0026#39;service_name\u0026#39;] action = event[\u0026#39;action\u0026#39;] if action == \u0026#39;ROLLBACK_TO_PREVIOUS\u0026#39;: # Get previous stable version previous_version = get_previous_stable_version(service_name) # Update ECS service to previous version rollback_result = rollback_ecs_service( service_name=service_name, target_version=previous_version ) # Wait for rollback completion wait_for_rollback_completion(service_name) # Validate rollback success health_status = validate_service_health(service_name) return { \u0026#39;service\u0026#39;: service_name, \u0026#39;rollback_status\u0026#39;: \u0026#39;SUCCESS\u0026#39;, \u0026#39;previous_version\u0026#39;: previous_version, \u0026#39;health_status\u0026#39;: health_status, \u0026#39;rollback_duration\u0026#39;: rollback_result[\u0026#39;duration\u0026#39;] } return {\u0026#39;error\u0026#39;: \u0026#39;Unknown rollback action\u0026#39;} def get_previous_stable_version(service_name): # Query ECS service deployment history deployments = ecs_client.describe_services( cluster=\u0026#39;restaurant-cluster\u0026#39;, services=[service_name] ) # Find last successful deployment for deployment in deployments[\u0026#39;services\u0026#39;][0][\u0026#39;deployments\u0026#39;]: if deployment[\u0026#39;status\u0026#39;] == \u0026#39;STABLE\u0026#39;: return deployment[\u0026#39;taskDefinition\u0026#39;] raise Exception(f\u0026#34;No stable version found for {service_name}\u0026#34;) Test Rollback Scenarios # Simulate deployment failure python src/deployment_orchestrator.py deploy \\ --environment test \\ --simulate-failure order-service \\ --failure-type HEALTH_CHECK_FAILED # Execute rollback python src/deployment_orchestrator.py rollback \\ --execution-arn arn:aws:states:us-east-1:ACCOUNT:execution:failed-execution-id # Verify rollback success python src/deployment_orchestrator.py status --verify-health Error Scenario Testing (5 phút) Test Case 1: Network Timeout # Simulate network timeout aws stepfunctions start-execution \\ --state-machine-arn arn:aws:states:us-east-1:ACCOUNT:stateMachine:restaurant-deployment-orchestrator \\ --input \u0026#39;{ \u0026#34;deployment_id\u0026#34;: \u0026#34;test-timeout-001\u0026#34;, \u0026#34;services\u0026#34;: [\u0026#34;auth-service\u0026#34;], \u0026#34;simulate_error\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;TIMEOUT\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;auth-service\u0026#34;, \u0026#34;delay\u0026#34;: 30 } }\u0026#39; Expected Behavior:\nFirst attempt: Times out after 30 seconds Retry 1: Succeeds after 5 second delay Total time: ~40 seconds Result: SUCCESS with retry Test Case 2: Service Health Check Failure # Simulate health check failure aws stepfunctions start-execution \\ --state-machine-arn arn:aws:states:us-east-1:ACCOUNT:stateMachine:restaurant-deployment-orchestrator \\ --input \u0026#39;{ \u0026#34;deployment_id\u0026#34;: \u0026#34;test-health-002\u0026#34;, \u0026#34;services\u0026#34;: [\u0026#34;order-service\u0026#34;], \u0026#34;simulate_error\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;HEALTH_CHECK_FAILED\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;order-service\u0026#34;, \u0026#34;failure_count\u0026#34;: 2 } }\u0026#39; Expected Behavior:\nDeploy completes successfully Health check fails 2 times Retry succeeds on 3rd attempt Result: SUCCESS after retries Test Case 3: Critical Failure with Rollback # Simulate critical failure requiring rollback aws stepfunctions start-execution \\ --state-machine-arn arn:aws:states:us-east-1:ACCOUNT:stateMachine:restaurant-deployment-orchestrator \\ --input \u0026#39;{ \u0026#34;deployment_id\u0026#34;: \u0026#34;test-rollback-003\u0026#34;, \u0026#34;services\u0026#34;: [\u0026#34;payment-service\u0026#34;], \u0026#34;simulate_error\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;CRITICAL_FAILURE\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;payment-service\u0026#34;, \u0026#34;error\u0026#34;: \u0026#34;CONFIGURATION_INVALID\u0026#34; } }\u0026#39; Expected Behavior:\nPayment service deployment fails Error classified as non-retryable Automatic rollback initiated Previous version restored Result: FAILED with successful rollback Test Case 4: Dependency Service Unavailable # Simulate dependency failure aws stepfunctions start-execution \\ --state-machine-arn arn:aws:states:us-east-1:ACCOUNT:stateMachine:restaurant-deployment-orchestrator \\ --input \u0026#39;{ \u0026#34;deployment_id\u0026#34;: \u0026#34;test-dependency-004\u0026#34;, \u0026#34;services\u0026#34;: [\u0026#34;order-service\u0026#34;], \u0026#34;simulate_error\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;DEPENDENCY_UNAVAILABLE\u0026#34;, \u0026#34;dependency\u0026#34;: \u0026#34;auth-service\u0026#34;, \u0026#34;duration\u0026#34;: 60 } }\u0026#39; Expected Behavior:\nOrder service waits for auth service Retry with exponential backoff Success after dependency recovers Result: SUCCESS with extended duration Error Monitoring \u0026amp; Alerting CloudWatch Metrics Custom Metrics to Track:\n# In Lambda functions import boto3 cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) def publish_error_metric(error_type, service_name): cloudwatch.put_metric_data( Namespace=\u0026#39;Restaurant/Deployment\u0026#39;, MetricData=[ { \u0026#39;MetricName\u0026#39;: \u0026#39;DeploymentErrors\u0026#39;, \u0026#39;Dimensions\u0026#39;: [ { \u0026#39;Name\u0026#39;: \u0026#39;ServiceName\u0026#39;, \u0026#39;Value\u0026#39;: service_name }, { \u0026#39;Name\u0026#39;: \u0026#39;ErrorType\u0026#39;, \u0026#39;Value\u0026#39;: error_type } ], \u0026#39;Value\u0026#39;: 1, \u0026#39;Unit\u0026#39;: \u0026#39;Count\u0026#39; } ] ) Error Dashboard Key Widgets to Include:\nError rate by service Rollback frequency Average recovery time Error types distribution SNS Alerts Configuration { \u0026#34;alert_conditions\u0026#34;: [ { \u0026#34;metric\u0026#34;: \u0026#34;DeploymentErrors\u0026#34;, \u0026#34;threshold\u0026#34;: 3, \u0026#34;period\u0026#34;: 300, \u0026#34;condition\u0026#34;: \u0026#34;GreaterThanThreshold\u0026#34; }, { \u0026#34;metric\u0026#34;: \u0026#34;RollbackRequired\u0026#34;, \u0026#34;threshold\u0026#34;: 1, \u0026#34;period\u0026#34;: 60, \u0026#34;condition\u0026#34;: \u0026#34;GreaterThanOrEqualToThreshold\u0026#34; } ] } Error handling implemented successfully? Time to optimize with parallel processing! ⚡\n"
},
{
	"uri": "//localhost:1313/6-parallel-processing/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]